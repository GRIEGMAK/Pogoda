{"version":3,"sources":["components/HeaderInfo.js","components/MainInfo.js","components/MainPart.js","components/Form.js","components/App.js","index.js"],"names":["HeaderInfo","props","city","MainInfo","className","country","temp","feels_like","sunTime","sunrise","sunset","windspeed","deg","humidity","Math","floor","pressure","visibility","error","MainPart","Form","onSubmit","weatherMethod","type","name","placeholder","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","cod","setState","sys","timezone","sunset_date","sunrise_date","sunTime_date","main","wind","speed","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6295478f.chunk.js","sourcesContent":["import React from 'react';\n\nconst HeaderInfo = (props) => {\n    return (\n        <div>\n            <h3>Погода online</h3>\n            <p>Погода: {props.city}</p>\n        </div>\n    )\n\n}\n\nexport default HeaderInfo;","import React from 'react';\n\nconst MainInfo = (props) => {\n    return(\n        <div className=\"infoWeath\">\n            {props.city && <div>\n                <h3>{props.city}</h3>\n                <div>{props.country}</div>\n                <div>Температура: {props.temp} градусов Цельсия</div>\n                <div>Ощущается как {props.feels_like}</div>\n                <div>Солнечный день: {props.sunTime}</div>\n                <div>А именно: c {props.sunrise} до {props.sunset}</div>\n                <div>Ветер {props.windspeed}км/ч при направлении {props.deg}/360(Значение по компасу)</div>\n                <div>Влажность: {props.humidity}% </div>\n                <div>Давление: {Math.floor(props.pressure*100/133.3224)} мм.рт.ст</div>\n                <div>Видимость: {props.visibility/1000}km</div>\n            </div>\n            }\n            <div className=\"error\">{props.error}</div>\n        </div>\n    )\n\n};\n\nexport default MainInfo;","import React from 'react';\nimport MainInfo from \"./MainInfo\";\n\nconst MainPart = (props) => {\n    return(\n        <div>\n            <MainInfo temp={props.temp}\n                      city={props.city}\n                      country={props.country}\n                      sunrise={props.sunrise}\n                      sunset={props.sunset}\n                      error={props.error}\n                      sunTime={props.sunTime}\n                      windspeed={props.windspeed}\n                      humidity={props.humidity}\n                      pressure={props.pressure}\n                      deg={props.deg}\n                      visibility={props.visibility}\n                      feels_like={props.feels_like}\n            />\n        </div>\n    )\n};\n\nexport default MainPart;","import React from 'react';\n\n\nconst Form = (props) => {\n    return (\n        <form onSubmit={props.weatherMethod}>\n            <input type=\"text\" name=\"city\" placeholder=\"Gorod\"/>\n            <button>Получить погоду</button>\n        </form>\n    )\n\n}\n\nexport default Form;","import React from 'react';\nimport HeaderInfo from \"./HeaderInfo\";\nimport MainPart from \"./MainPart\";\nimport Form from \"./Form\";\n\nconst API_KEY ='5712b8887160185aaa20b84fcd1da1c4';\n\nclass App extends React.Component {\n        state = {\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                sunrise: undefined,\n                sunset: undefined,\n                sunTime: undefined,\n                windspeed: undefined,\n                humidity: undefined,\n                pressure: undefined,\n                deg: undefined,\n                visibility:undefined,\n                feels_like: undefined,\n                error: undefined,\n        }\n        gettingWeather = async (e) => {\n                e.preventDefault();\n                const city = e.target.elements.city.value;\n                if(city) {\n                    const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n                    const data = await api_url.json();\n                    if (data.cod === \"404\") {\n                        this.setState({\n                            temp: undefined,\n                            city: undefined,\n                            country: undefined,\n                            sunrise: undefined,\n                            sunTime: undefined,\n                            sunset: undefined,\n                            windspeed: undefined,\n                            humidity: undefined,\n                            pressure: undefined,\n                            deg: undefined,\n                            visibility:undefined,\n                            feels_like: undefined,\n                            error: \"Проверьте название города или интернет соединение\",\n                        });\n                    }\n                    else {\n                        let sunset = data.sys.sunset + data.timezone;\n                        let sunset_date = Math.floor(sunset % 86400 / 3600) + \":\" + Math.floor(sunset % 3600 / 60) + \":\" + Math.floor(sunset % 60);\n                        let sunrise = data.sys.sunrise + data.timezone;\n                        let sunrise_date = Math.floor(sunrise % 86400 / 3600) + \":\" + Math.floor(sunrise % 3600 / 60) + \":\" + Math.floor(sunrise % 60)\n                        let sunTime = sunset - sunrise;\n                        let sunTime_date = Math.floor(sunTime % 86400 / 3600) + \":\" + Math.floor(sunTime % 3600 / 60) + \":\" + Math.floor(sunTime % 60)\n\n                        this.setState({\n                            temp: data.main.temp,\n                            city: data.name,\n                            country: data.sys.country,\n                            sunrise: sunrise_date,\n                            sunset: sunset_date,\n                            sunTime: sunTime_date,\n                            windspeed: data.wind.speed,\n                            humidity: data.main.humidity,\n                            pressure: data.main.pressure,\n                            deg: data.wind.deg,\n                            visibility:data.visibility,\n                            feels_like: data.main.feels_like,\n                            error: undefined,\n                        });\n                    }\n                }\n            else {\n                    this.setState({\n                        temp: undefined,\n                        city: undefined,\n                        country: undefined,\n                        sunrise: undefined,\n                        sunTime: undefined,\n                        sunset: undefined,\n                        windspeed: undefined,\n                        humidity: undefined,\n                        pressure: undefined,\n                        deg: undefined,\n                        visibility:undefined,\n                        feels_like: undefined,\n                        error: \"Введите название города\",\n                    });\n                }\n        };\n\n        render() {\n                return (\n                    <div className=\"wrapper\">\n                        <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-5 info\">\n                                    <HeaderInfo city={this.state.city}/>\n                                </div>\n                                <div className=\"col-sm-7 form\">\n                                    <Form weatherMethod={this.gettingWeather}/>\n                                    <MainPart temp={this.state.temp}\n                                              city={this.state.city}\n                                              country={this.state.country}\n                                              sunrise={this.state.sunrise}\n                                              sunset={this.state.sunset}\n                                              sunTime={this.state.sunTime}\n                                              windspeed={this.state.windspeed}\n                                              humidity={this.state.humidity}\n                                              pressure={this.state.pressure}\n                                              deg={this.state.deg}\n                                              visibility={this.state.visibility}\n                                              error={this.state.error}\n                                              feels_like={this.state.feels_like}/>\n                                </div>\n                            </div>\n                        </div>\n                        </div>\n                    </div>\n                )\n        }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './styles/App.css'\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}